
 module.exports = {

	hash: function (data){
		var crypto = require("crypto");	
		var sha256 = crypto.createHash("sha256");
		sha256.update(data, "utf8");//utf8 here
		var result = sha256.digest("hex");
		return result;
	},
	makeRndStr: function (len){
		var text = "";
		var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
		for( var i=0; i < len; i++ )
			text += possible.charAt(Math.floor(Math.random() * possible.length));
		return text;
	},
	rollDice: function (coin,sdata,alias,bet_amount,pick,cb){
		var config = require('config');
		var wallet_balance = sdata.wallet_balance; //TESTING WALLET AMOUNT
		var username = sdata.username;

		this.debug(sdata);

		if (pick != "over" && pick !="under"){
			cb({result:"ERROR",msg:"Sorry but the pick you made is incorrect."});
			return;
		}

		if (bet_amount >= config.coin[coin].dice.min_bet && bet_amount <= config.coin[coin].dice.max_bet){

			if (bet_amount <= wallet_balance){
				var userid = sdata.userid;

				var multiplier = sdata.multiplier;
				var chance = Math.round((99/multiplier)*100)/100;
				var over = 100-chance;
				var under = chance;
				var server_seed = sdata.server_seed;
				var client_seed = sdata.client_seed;
				var nonce = this.makeRndStr(8);
				var win = false;
				var profit = 0;
				var tOutcome = '';
				var isOver = 0;
				var intwin = 0;

				this.debug({nonce:nonce, server_seed:server_seed, client_Seed:client_seed, SEED: nonce + server_seed + client_seed });
				var roll = this.hash2Number(this.hash(nonce + server_seed + client_seed ));
				
				if (pick == "under")
					isOver = 1;

				if (roll > over)
					tOutcome = "over";
				if (roll < under)
					tOutcome = "under";

				
				if (pick == tOutcome){
					win = true;
					profit  = ((bet_amount * multiplier)-((bet_amount * multiplier)*(config.coin[coin].dice.house_edge/100))-bet_amount);
					intwin = 1;
					win_amount = 1 *  bet_amount + profit;
				}else{
					win = false;
					intwin = 0;
					profit = -1 * bet_amount;
					win_amount = profit;
				}

				this.debug("WIN AMOUNT:" + profit);

				//wallet_balance = Math.round((wallet_balance + profit)*1000000)/1000000;
				this.debug(wallet_balance +  "  - " + profit);

				wallet_balance = parseFloat(wallet_balance) + parseFloat(profit);
				wallet_balance = parseFloat(wallet_balance).toFixed(8);
				win_amount = win_amount.toFixed(8);

				this.debug(wallet_balance +  "  - " + profit);
				
				this.walletMoveFunds(coin,username,profit);

				if (win_amount<0)
					win_amount = win_amount * -1;
				
				var iq = "insert into bet set isOver = '" + isOver + "' ,win=" + intwin + ",coin='" + coin + "' ,profit=" + profit + ",roll=" + roll + ", amount = " + bet_amount + " , multiplier = '" + multiplier + "', server_seed = '" + server_seed + "', client_seed = '" + client_seed + "', nonce = '" + nonce + "', user = " + userid ;
				this.debug("-INSERT - " + iq);
				this.sqlQuery(iq,function(){});

				var rObj = {result: "SUCCESS", userid:userid, bet_amount: bet_amount,pick: pick, multiplier:multiplier, chance:chance ,server_seed: server_seed, client_seed: client_seed, nonce: nonce,over:over, under:under, roll: roll, win:win,win_amount:win_amount+coin, wallet_balance:wallet_balance };
				this.debug(rObj);
				cb(rObj);
			}else{
				cb({result: "ERROR", msg: "Insufficient funds.",wallet_balance:wallet_balance});
			}
		}else{
			cb({result: "ERROR", msg: "Bets range from " + config.coin[coin].dice.min_bet + coin + " to " + config.coin[coin].dice.max_bet + coin});
		}

	},
	hash2Number: function(hash){

		var val = hash.toString().substr(0,8)
			this.debug({hash:hash,val:val});
		return ''+ Math.round((this.hexdec(val)/42949672.95)*100)/100;
	},
	hexdec: function (hex_string) {
	  hex_string = (hex_string + '').replace(/[^a-f0-9]/gi, '');
	  return parseInt(hex_string, 16);
	},
	makeClientSeed: function(){
		var client_seed = this.makeRndStr(8);
		return client_seed;
	},
	makeServerSeed: function (){
		var server_seed = this.makeRndStr(15);
		return server_seed;
	},
	sqlQuery: function(query,cb){
		var db = require('db');
		var self = this;
		this.debug("sqlQuery: " + query);
	   db.getConnection(function(err, connection){
	        if(!err){
	            connection.query(query, function(err, rows) {
	            	if (err) return self.debug("sqlQuery error:" + err);

	            	connection.release(); 
	            	if (rows){
	            		self.debug("sqlQuery results: "+ JSON.stringify(rows[0]));
	            		cb(rows);
	            	}else{
	            		cb();
	            	}
	            });
	            }else{
	            	self.debug(err);
	            }
	        });
	},
	isValid: function(str){
		this.debug("CHECKING: " + str);
		if(str == null)
			return false;
		if(str == "")
			return false;
		return true;
	},
	addSession: function(coin,userid,alias,cb){
		var server_seed = this.makeServerSeed();
		var client_seed = this.makeClientSeed();

		var multiplier = 2;

		var q = "insert into session set userid = '" + userid + "', alias ='" + alias + "', coin = '" + coin + "', server_seed ='" + server_seed +"', client_seed ='" + client_seed +"', multiplier ='" + multiplier + "'";
		this.sqlQuery(q,function(){
			cb({result:"SUCCESS",server_seed:server_seed,client_seed:client_seed,multiplier:multiplier});
		});

	},
	getSession: function(coin,alias,cb){
		var config = require('config');	
		var that = this;

		var q = "SELECT a.*,b.username FROM session AS a INNER JOIN users AS b ON a.userid = b.id where a.alias = '" + alias + "' and a.coin='" +  coin + "' and a.createdate>date_sub(now(),INTERVAL " + config.session_time +" HOUR) order by id desc limit 1";
		this.sqlQuery(q,function(r){
			if (!r){
				cb(0);
			}else{
				if (r.username != "undefined"){
					that.getWalletAddressByUser(coin,r.username,function(wallet_address){
						that.getWalletBalance(coin,r.username,function(balance){
							var chance = Math.round((99/r.multiplier)*100)/100;
							var over = 100-chance;
							var under = chance;
							balance = balance.toFixed(8);
							cb({result:"SUCCESS",username:r.username, userid:r.userid,client_seed:r.client_seed,server_seed:r.server_seed,multiplier:r.multiplier,chance:chance,over:over,under:under,wallet_balance:balance,wallet_address:wallet_address});
						});
					})
				}
			}
		});
	},
	debug: function(msg){
		var config = require('config');
		if (config.debug){

			console.log(msg);
		}
	},
	debugl: function(coin,user,msg){
		var config = require('config');
		if (config.debug){
			//add sql insert here.
			console.log(msg);
		}
	},
	setClientSeed: function(coin,alias,seed,cb){
		var config = require('config');
		var that = this;
		if( seed === null || seed === "null" || seed.length < config.client_seed.min_length || seed.length > config.client_seed.max_length ){
			this.debug("SEED: " +  seed)
			cb({result:"ERROR",msg:"You cannot supply an empty seed or a seed below " + config.client_seed.min_length + " or above " + config.client_seed.max_length })
			return;
		}

		if (seed === config.client_seed.random_keyword)
			seed = this.makeClientSeed();
		
		var q = "update session set client_seed = '" + seed + "' where alias = '" + alias + "'and coin='" + coin + "' ORDER BY id DESC LIMIT 1";
		this.sqlQuery(q,function(){
			that.debug("Changed seed for " + alias + " to " + seed);
			cb({result:"SUCCESS"});
		});
	},
	setMultiplier: function(coin,alias,multiplier,cb){
		var config = require('config');
		var that = this;

		if( multiplier === null || multiplier === "null" || multiplier < config.dice.multiplier_min || multiplier > config.dice.multiplier_max ){
			this.debug("multiplier: " +  multiplier)
			cb({result:"ERROR",msg:"You cannot supply an empty multiplier or a multiplier below " + config.dice.multiplier_min + " or above " + config.dice.multiplier_max + " characters."})
			return;
		}

		var q = "update session set multiplier = '" + multiplier + "' where alias = '" + alias + "' and coin='" + coin + "' ORDER BY id DESC LIMIT 1";
		this.sqlQuery(q,function(){
			var rObj = {result:"SUCCESS"};
			that.debug(rObj);
			cb(rObj);
		});
	},
	getWalletConn: function(coin){
		var config = require('config');
		var coind = require('node-litecoin');
		this.debug("COIN " + coin);
		return new coind.Client(config.coin[coin].wallet);
	},
	getWalletBalance: function(coin,user,cb){
		var client = this.getWalletConn(coin);
		var that = this;

		client.getBalance(user, 1, function(err, balance) {
		  if (err) return that.debug(err);
		  that.debug('getWalletBalance Balance:' + balance);
		 cb(balance);
		});
	},
	getWalletAddressByUser: function(coin,user,cb){
		var client = this.getWalletConn(coin);
		var that = this;

		client.getAccountAddress(user, function(err, address) {
		  if (err) return that.debug(err);
		  that.debug('address:' + address);
		 cb(address);
		});
	},
	walletMoveFunds: function(coin,user,amount){
		var client = this.getWalletConn(coin);
		var that = this;

		var from = '';
		var to = user;

		if (amount<0){
			from = user;
			to = '';
			amount = amount * -1;
		}

		this.debug("moving funds - from:" + from + " to:" + to + " amount:" + amount);

		client.move(from,to,amount, function(err, address) {
		  if (err) return that.debug(err);
		  that.debug('funds moved');
		});
	
	},
	getBets: function(username,cb){
		var config = require('config');	
		var that = this;

		var q = "select a.*,a.amount + a.profit as 'win_amount' from bet as a inner join users as b on a.user = b.id where b.username = '"+ username + "'";
		this.sqlQuery(q,function(r){
			if (!r){
				cb(0);
			}
			else
			{
				if (r.username != "undefined"){
					//cb({result:"SUCCESS",username:r.username, userid:r.userid,client_seed:r.client_seed,server_seed:r.server_seed,multiplier:r.multiplier,chance:chance,over:over,under:under,wallet_balance:balance,wallet_address:wallet_address});			
					cb(JSON.stringify(r));
				}
			}
		});
	},

}

